module: [statement+] // A module consists of one or more statements.

statement: expression -> expr_statement // Expression statement (single)

expression: atom
	| name		-> variable
	| "*" name	-> star_expr

?atom.0: literals
	| "(" sum ")"
	| sum
	| product
	| bit_expr
	| unary_expr
	| bool_oper

?sum.0: product
	| sum add_op product

?product.0: atom
	| product mul_op atom

unary_expr: unary_op expression "]"
!unary_op: "[+"	-> unary_add
	| "[-"		-> unary_neg
	| "[~"		-> unary_invert
	| "[not"		-> unary_not

bit_expr.0: expression bit_op expression
!bit_op: "<<" | ">>" | "&" | "|" | "^"

!add_op: "+" | "-"
!mul_op: "*" | "@" | "/" | "%" | "**"

bool_oper: expression bool_op expression
bool_op: OR | AND

OR.10: "or"
AND.10: "and"

?literals: const_none
	| const_true
	| const_false
	| list_literal
	| tuple_literal
	| set_literal
	| dict_literal
	| const_number
	| const_string

const_none: "none"
const_true: "true"
const_false: "false"

const_string: string
const_number: number

list_literal:  "[" _cs_list{expression} "]"
tuple_literal: "(" _cs_list{expression} ")"
set_literal:   "{" _cs_list{expression} "}"
dict_literal:  "{" _sep{key_value, ","} "}"

_cs_list{item}: item [("," item)* | (", " item)*] ","?
_sep{item, sep}: item (sep item)*
key_value: expression ":" expression

%import python.name
%import python.number
%import python.string

%import common.CPP_COMMENT
%import common.NEWLINE
%import common.WS

%ignore CPP_COMMENT
%ignore NEWLINE
%ignore WS
