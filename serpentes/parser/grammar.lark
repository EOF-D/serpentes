module: [statement+] // A module consists of one or more statements.

statement: expression -> expr_statement // Expression statement (single)

expression: atom_expr

?atom_expr: atom_expr "(" [arguments] ")"	-> call_expr
	| atom_expr "." name					-> attr
	| if_expr
	| assign_expr
	| atom

?if_expr: expression "if" expression "else" expression
assign_expr: name "<-" expression

?arguments.15: _sep{argument, ","}
call_kwargs.15: "**" expression

argument.10: expression
	| name "=" expression	-> keyword
	| call_kwargs

?atom: literals
	| name				-> variable
	| "*" expression	-> star_expr
	| product
	| bit_expr
	| unary_expr
	| bool_oper
	| comp_oper
	| sum_atom
	| sum

sum_atom.5: "(" sum ")"
?sum.0: product
	| sum add_op product

?product.0: atom
	| product mul_op atom

unary_expr: unary_op expression "]"
!unary_op: "[+"	-> unary_add
	| "[-"		-> unary_neg
	| "[~"		-> unary_invert
	| "[not"		-> unary_not

bit_expr.0: expression bit_op expression
!bit_op: "<<" | ">>" | "&" | "|" | "^"

!add_op: "+" | "-"
!mul_op: "*" | "@" | "/" | "%" | "exp"

bool_oper: expression bool_op expression
bool_op: OR | AND

OR.10: "or"
AND.10: "and"

?comp_oper: expression (comp_op expression)*
!comp_op: "<"
	| ">"
	| "=="
	| ">="
	| "<="
	| "!="
	| IN
	| IS
	| ISNOT
	| NOTIN

IN.10: "in"
IS.10: "is"
ISNOT.15: "is not"
NOTIN.15: "not in"

literals: NONE	-> const_none
	| TRUE		-> const_true
	| FALSE		-> const_false
	| number	-> const_number
	| string	-> const_string
	| list		-> list_literal
	| tuple		-> tuple_literal
	| set		-> set_literal
	| dict		-> dict_literal

NONE: "none"
TRUE: "true"
FALSE: "false"

list:  "[" _cs_list{expression} "]"
tuple: "(" _cs_list{expression} ")"
set:   "{" _cs_list{expression} "}"
dict:  "{" _sep{key_value, ","} "}"

_cs_list{item}: item [("," item)* | (", " item)*] ","?
_sep{item, sep}: item (sep item)*
key_value: expression ":" expression

%import python.name
%import python.number
%import python.string

%import common.CPP_COMMENT
%import common.NEWLINE
%import common.WS

%ignore CPP_COMMENT
%ignore NEWLINE
%ignore WS
